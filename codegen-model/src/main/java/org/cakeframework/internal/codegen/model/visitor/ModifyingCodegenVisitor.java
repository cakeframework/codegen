/*
 * Copyright (c) 2008 Kasper Nielsen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* 
 * This class was automatically generated by cake.bootstrap.codegen.model.GenerateModel 
 * Available in the https://github.com/cakeframework/cake-developers/ project 
 */
package org.cakeframework.internal.codegen.model.visitor;

import org.cakeframework.internal.codegen.model.AbstractASTNode;
import org.cakeframework.internal.codegen.model.PackageDeclaration;
import org.cakeframework.internal.codegen.model.body.FieldDeclaration;
import org.cakeframework.internal.codegen.model.body.InitializerDeclaration;
import org.cakeframework.internal.codegen.model.body.Parameter;
import org.cakeframework.internal.codegen.model.body.VariableDeclarator;
import org.cakeframework.internal.codegen.model.expression.ArrayAccessExpression;
import org.cakeframework.internal.codegen.model.expression.ArrayCreationExpression;
import org.cakeframework.internal.codegen.model.expression.AssignExpression;
import org.cakeframework.internal.codegen.model.expression.BinaryExpression;
import org.cakeframework.internal.codegen.model.expression.CastExpression;
import org.cakeframework.internal.codegen.model.expression.ClassExpression;
import org.cakeframework.internal.codegen.model.expression.ConditionalExpression;
import org.cakeframework.internal.codegen.model.expression.EncapsulatedExpression;
import org.cakeframework.internal.codegen.model.expression.Expression;
import org.cakeframework.internal.codegen.model.expression.FieldAccessExpression;
import org.cakeframework.internal.codegen.model.expression.InstanceOfExpression;
import org.cakeframework.internal.codegen.model.expression.Literal;
import org.cakeframework.internal.codegen.model.expression.MethodInvocation;
import org.cakeframework.internal.codegen.model.expression.NameExpression;
import org.cakeframework.internal.codegen.model.expression.NewInstanceExpression;
import org.cakeframework.internal.codegen.model.expression.SuperExpression;
import org.cakeframework.internal.codegen.model.expression.ThisExpression;
import org.cakeframework.internal.codegen.model.expression.UnaryExpression;
import org.cakeframework.internal.codegen.model.expression.VariableDeclarationExpression;
import org.cakeframework.internal.codegen.model.statement.AssertStatement;
import org.cakeframework.internal.codegen.model.statement.BlockStatement;
import org.cakeframework.internal.codegen.model.statement.BreakStatement;
import org.cakeframework.internal.codegen.model.statement.CatchClause;
import org.cakeframework.internal.codegen.model.statement.ContinueStatement;
import org.cakeframework.internal.codegen.model.statement.DoStatement;
import org.cakeframework.internal.codegen.model.statement.EmptyStatement;
import org.cakeframework.internal.codegen.model.statement.ExplicitConstructorInvocationStatement;
import org.cakeframework.internal.codegen.model.statement.ExpressionStatement;
import org.cakeframework.internal.codegen.model.statement.ForStatement;
import org.cakeframework.internal.codegen.model.statement.IfStatement;
import org.cakeframework.internal.codegen.model.statement.LabeledStatement;
import org.cakeframework.internal.codegen.model.statement.ReturnStatement;
import org.cakeframework.internal.codegen.model.statement.Statement;
import org.cakeframework.internal.codegen.model.statement.SwitchEntryStatement;
import org.cakeframework.internal.codegen.model.statement.SwitchStatement;
import org.cakeframework.internal.codegen.model.statement.SynchronizedStatement;
import org.cakeframework.internal.codegen.model.statement.TextLineStatement;
import org.cakeframework.internal.codegen.model.statement.ThrowStatement;
import org.cakeframework.internal.codegen.model.statement.TryStatement;
import org.cakeframework.internal.codegen.model.statement.WhileStatement;
import org.cakeframework.internal.codegen.model.type.ClassOrInterfaceType;
import org.cakeframework.internal.codegen.model.type.PrimitiveType;
import org.cakeframework.internal.codegen.model.type.ReferenceType;
import org.cakeframework.internal.codegen.model.type.Type;

/**
 * This class has been autogenerated
 *
 * @author Kasper Nielsen
 */
public abstract class ModifyingCodegenVisitor {

    public AbstractASTNode visit(PackageDeclaration n) {
        n.setName((NameExpression) n.getName().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(Parameter n) {
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(InitializerDeclaration n) {
        n.setBody((BlockStatement) n.getBody().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(FieldDeclaration n) {
        n.setType((Type) n.getType().accept(this));
        n.setDeclarators((VariableDeclarator) n.getDeclarators().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(VariableDeclarator n) {
        n.setName((NameExpression) n.getName().accept(this));
        n.setInit((Expression) n.getInit().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ArrayCreationExpression n) {
        n.setType((Type) n.getType().accept(this));
        for (int i = 0; i < n.getExpression().size(); i++) {
            n.getExpression().set(i, (Expression) n.getExpression().get(i).accept(this));
        }
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ArrayAccessExpression n) {
        n.setArray((Expression) n.getArray().accept(this));
        for (int i = 0; i < n.getIndex().size(); i++) {
            n.getIndex().set(i, (Expression) n.getIndex().get(i).accept(this));
        }
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(AssignExpression n) {
        n.setLeft((Expression) n.getLeft().accept(this));
        n.setRight((Expression) n.getRight().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(BinaryExpression n) {
        n.setLeft((Expression) n.getLeft().accept(this));
        n.setRight((Expression) n.getRight().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(CastExpression n) {
        n.setType((Type) n.getType().accept(this));
        n.setExpression((Expression) n.getExpression().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ClassExpression n) {
        n.setType((Type) n.getType().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ConditionalExpression n) {
        n.setCondition((Expression) n.getCondition().accept(this));
        n.setThenExpression((Expression) n.getThenExpression().accept(this));
        n.setElseExpression((Expression) n.getElseExpression().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(EncapsulatedExpression n) {
        n.setInner((Expression) n.getInner().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(FieldAccessExpression n) {
        if (n.getScope() != null) {
            n.setScope((Expression) n.getScope().accept(this));
        }
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(InstanceOfExpression n) {
        n.setExpression((Expression) n.getExpression().accept(this));
        n.setType((Type) n.getType().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(MethodInvocation n) {
        n.setScope((Expression) n.getScope().accept(this));
        for (int i = 0; i < n.getArguments().size(); i++) {
            n.getArguments().set(i, (Expression) n.getArguments().get(i).accept(this));
        }
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(NameExpression n) {
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(NewInstanceExpression n) {
        if (n.getScope() != null) {
            n.setScope((Expression) n.getScope().accept(this));
        }
        n.setType((Type) n.getType().accept(this));
        for (int i = 0; i < n.getArguments().size(); i++) {
            n.getArguments().set(i, (Expression) n.getArguments().get(i).accept(this));
        }
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ThisExpression n) {
        n.setClassExpression((Expression) n.getClassExpression().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(SuperExpression n) {
        n.setClassExpression((Expression) n.getClassExpression().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(UnaryExpression n) {
        n.setExpression((Expression) n.getExpression().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(VariableDeclarationExpression n) {
        n.setType((Type) n.getType().accept(this));
        for (int i = 0; i < n.getDeclarators().size(); i++) {
            n.getDeclarators().set(i, (VariableDeclarator) n.getDeclarators().get(i).accept(this));
        }
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(Literal n) {
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(AssertStatement n) {
        n.setCheck((Expression) n.getCheck().accept(this));
        n.setMessage((Expression) n.getMessage().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(BlockStatement n) {
        for (int i = 0; i < n.getStatements().size(); i++) {
            n.getStatements().set(i, (Statement) n.getStatements().get(i).accept(this));
        }
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(BreakStatement n) {
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(CatchClause n) {
        n.setParameter((Parameter) n.getParameter().accept(this));
        n.setBody((BlockStatement) n.getBody().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ContinueStatement n) {
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(TextLineStatement n) {
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ExpressionStatement n) {
        n.setExpression((Expression) n.getExpression().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ForStatement n) {
        for (int i = 0; i < n.getInit().size(); i++) {
            n.getInit().set(i, (Expression) n.getInit().get(i).accept(this));
        }
        if (n.getCompare() != null) {
            n.setCompare((Expression) n.getCompare().accept(this));
        }
        for (int i = 0; i < n.getUpdate().size(); i++) {
            n.getUpdate().set(i, (Expression) n.getUpdate().get(i).accept(this));
        }
        n.setBody((Statement) n.getBody().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(DoStatement n) {
        n.setCondition((Expression) n.getCondition().accept(this));
        n.setBody((Statement) n.getBody().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ExplicitConstructorInvocationStatement n) {
        for (int i = 0; i < n.getExpression().size(); i++) {
            n.getExpression().set(i, (Expression) n.getExpression().get(i).accept(this));
        }
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(EmptyStatement n) {
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(IfStatement n) {
        n.setCondition((Expression) n.getCondition().accept(this));
        n.setThenStatement((Statement) n.getThenStatement().accept(this));
        if (n.getElseStatement() != null) {
            n.setElseStatement((Statement) n.getElseStatement().accept(this));
        }
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(LabeledStatement n) {
        n.setStatement((Statement) n.getStatement().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ReturnStatement n) {
        n.setExpression((Expression) n.getExpression().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(SynchronizedStatement n) {
        n.setMutex((Expression) n.getMutex().accept(this));
        n.setBlock((BlockStatement) n.getBlock().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(SwitchEntryStatement n) {
        n.setLabel((Expression) n.getLabel().accept(this));
        for (int i = 0; i < n.getStatements().size(); i++) {
            n.getStatements().set(i, (Statement) n.getStatements().get(i).accept(this));
        }
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(SwitchStatement n) {
        n.setSelect((Expression) n.getSelect().accept(this));
        for (int i = 0; i < n.getEntries().size(); i++) {
            n.getEntries().set(i, (SwitchEntryStatement) n.getEntries().get(i).accept(this));
        }
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ThrowStatement n) {
        n.setExpression((Expression) n.getExpression().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(TryStatement n) {
        n.setTryBlock((BlockStatement) n.getTryBlock().accept(this));
        for (int i = 0; i < n.getCatchClauses().size(); i++) {
            n.getCatchClauses().set(i, (CatchClause) n.getCatchClauses().get(i).accept(this));
        }
        n.setFinallyBlock((BlockStatement) n.getFinallyBlock().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(WhileStatement n) {
        n.setCondition((Expression) n.getCondition().accept(this));
        n.setBody((Statement) n.getBody().accept(this));
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ClassOrInterfaceType n) {
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(PrimitiveType n) {
        return visitNodeAfter(n);
    }

    public AbstractASTNode visit(ReferenceType n) {
        return visitNodeAfter(n);
    }

    public AbstractASTNode visitNodeAfter(AbstractASTNode e) {
        return e;
    }
}
