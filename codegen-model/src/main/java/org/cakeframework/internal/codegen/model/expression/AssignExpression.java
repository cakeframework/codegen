/*
 * Copyright (c) 2008 Kasper Nielsen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* 
 * This class was automatically generated by cake.bootstrap.codegen.model.GenerateModel 
 * Available in the https://github.com/cakeframework/cake-developers/ project 
 */
package org.cakeframework.internal.codegen.model.expression;

import java.util.Objects;

import org.cakeframework.internal.codegen.model.visitor.CodegenVisitor;
import org.cakeframework.internal.codegen.model.visitor.ModifyingCodegenVisitor;

/**
 * This class has been autogenerated
 *
 * @author Kasper Nielsen
 */
public class AssignExpression extends Expression {

    /** The left expression. */
    private Expression left;

    /** The operator. */
    private AsOperator operator;

    /** The right expression. */
    private Expression right;

    public AssignExpression() {}

    public AssignExpression(Expression left, AsOperator operator, Expression right) {
        this.left = left;
        this.operator = operator;
        this.right = right;
    }

    public Expression getLeft() {
        return left;
    }

    public AsOperator getOperator() {
        return operator;
    }

    public Expression getRight() {
        return right;
    }

    public void setLeft(Expression left) {
        this.left = left;
    }

    public void setOperator(AsOperator operator) {
        this.operator = operator;
    }

    public void setRight(Expression right) {
        this.right = right;
    }

    public void accept(CodegenVisitor visitor) {
        visitor.visit(this);
    }

    public Object accept(ModifyingCodegenVisitor visitor) {
        return visitor.visit(this);
    }

    /** {@inheritDoc} */
    public boolean equals(Object other) {
        return other instanceof AssignExpression && equals((AssignExpression) other);
    }

    public boolean equals(AssignExpression other) {
        return super.equals(this) && Objects.equals(left, other.left) && Objects.equals(operator, other.operator) && Objects.equals(right, other.right);
    }

    /** {@inheritDoc} */
    public int hashCode() {
        return Objects.hash(left, operator, right);
    }

    /** The operator for the expression. */
    public enum AsOperator {
        ASSIGN("="), 
        ASSIGN_MINUS("-="), 
        ASSIGN_MULTIPLY("*="), 
        ASSIGN_PLUS("+="), 
        ASSIGN_DIVIDE("/="), 
        ASSIGN_MODULUS("%="), 
        ASSIGN_AND("&="), 
        ASSIGN_OR("|="), 
        ASSIGN_XOR("^="), 
        ASSIGN_LEFT_SHIFT("<<="), 
        ASSIGN_RIGHT_SHIFT(">>="), 
        ASSIGN_RIGHT_UNSIGNED_SHIFT(">>>=");
        private final String symbol;
        private AsOperator(String symbol) {
            this.symbol = symbol;
        }

        public String toString() {
            return symbol;
        }
    }
}
